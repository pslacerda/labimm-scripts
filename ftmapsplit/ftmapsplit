#!/bin/python3
import sys, os

if len(sys.argv) != 2 or not os.path.isfile(sys.argv[1]):
    with open('README.md') as readme:
        sys.stderr.writelines(readme.readlines())
        sys.exit(1)

ftmap_fname = sys.argv[1]


#
# Utility to parse PDB files
#

ATOM = 'ATOM'
REMARK = 'REMARK'
CONECT = 'CONECT'
HEADER = 'HEADER'

SECTION = 0
RESNAME = 1
RESID = 2
DESCRIPTION = 1

FULL_RECORD = -1


def parse_pdb(fname):
    records = []
    with open(fname) as fp:
        for line in fp:
            if line.startswith(ATOM):
                record = (
                    ATOM,
                    line[17:20].strip(),
                    int(line[22:26]),
                    line
                )
            elif line.startswith(REMARK):
                record = (
                    REMARK,
                    line[7:].strip(),
                    line
                )
            elif line.startswith(CONECT):
                line = line[:-1].ljust(31) + '\n'
                record = (
                    CONECT,
                    int(line[6:11]),
                    int(line[11:16]),
                    line
                )
            elif line.startswith(HEADER):
                record = (
                    HEADER,
                    line[7:].strip(),
                    line
                )
            else:
                continue
            records.append(record)
    return records


#
# Split FTMap multi cluster PDB into various PDBs
#
cluster_fnames = []
cluster_file = None

for record in parse_pdb(ftmap_fname):
    if record[SECTION] == HEADER:
        if cluster_file:
            cluster_file.close()
        cluster_fname = record[DESCRIPTION]
        if cluster_fname == 'protein':
            cluster_fname = 'protein.pdb'
        else:
            cluster_fnames.append(cluster_fname)
        cluster_file = open(cluster_fname, 'w')
    else:
        cluster_file.write(record[FULL_RECORD])

cluster_file.close()


#
# Split each cluster PDB into various probe PDBs
#

for cluster_fname in cluster_fnames:
    pdb = parse_pdb(cluster_fname)
    n_remarks = len([
        remark for remark in pdb
        if remark[SECTION] == REMARK
    ])

    for remark_i in range(1, n_remarks+1):
        probe_atoms = [
            atom for atom in pdb
            if atom[SECTION] == ATOM and atom[RESID] == remark_i
        ]
        probe_conects = []

        remark_j = 0
        for idx in range(len(pdb)):
            record = pdb[idx]

            if record[SECTION] == REMARK:
                remark_j += 1
                if remark_i == remark_j:
                    idx += 1
                    record = pdb[idx]
                    while idx < len(pdb) and record[SECTION] == CONECT:
                        record = pdb[idx]
                        probe_conects.append(record)
                        idx += 1
                    break

        probe_fname = cluster_fname[:-4] + f'.{remark_i}.pdb'
        with open(probe_fname, 'w') as probe_file:
            for atom in probe_atoms:
                probe_file.write(atom[FULL_RECORD])

            for conect in probe_conects:
                probe_file.write(conect[FULL_RECORD])
