#!/usr/bin/python3

import collections
import errno
import io
import sys


BaseMolecule = collections.namedtuple('BaseMolecule', 'fname name begin end')

class Molecule(BaseMolecule):
    """A NamedTuple implementation that supports hashing based on molecule
    name. Two molecules with same name but different names results in the same
    hash.
    
    """
    def __hash__(self):
        return self.name.__hash__()

    def __eq__(self, other):
        if not isinstance(other, Molecule):
            return False
        return self.name == other.name


class Index(set):
    """Store molecules disallowing repeatition.
    
    """
    def __init__(self, indexes):
        for idx in indexes:
            self.update(idx)

    def sort(self):
        return sorted(sorted(self, key=lambda m: m.begin),
                                   key=lambda m: m.name)

    def filter(key=lambda m: True):
        return Index(m for m in self if lambda(m))


def createindex(ifile):
    index = Index()
    with open(ifile, 'r') as ifile:
        linen, newmol = 0, True
        for line in ifile:
            if newmol:
                name = line.strip()
                begin = linen
                newmol = False
            elif '$$$$' == line.strip():
                end = linen + 1
                index.add(Molecule(ifile.name, name, begin, end))
            linen += 1
    return index

def extract()

def fetch(index, ifile, ofile=None):
    try:
        ifile = open(ifile, 'r')
        if ofile is None:
            ofile = open(ofile, 'w')
        else:
            ofile = sys.stdout
    except IOError as err:
        if err.errno == errno.EACCESS:
            exit(1)
        raise
    else:
        linen = 0
        for mol in index:
            while linen != mol.begin:
                line = ifile.readline()
                linen += 1

            ofile.write(line)

            while linen != mol.end:
                ofile.write(ifile.readli)
                contents.write(ifile.readline())
                linen += 1

        if ofile is not sys.stdout:
            ofile.close()

if __name__ == "__main__":
    ifiles = sys.argv[1:]
    index = (createindex(f) for f in ifiles)
    index = sortindex(index)
    for ifile in ifiles:
        fetch(index, (m for m in index if m.fname == ifile))
